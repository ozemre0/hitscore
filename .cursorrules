Flutter/Dart Standards
- Use l10n (AppLocalizations) for every string. No hardcoded strings.
- AppLocalizations must be used correctly everywhere. No fallback literals.
- Every page must be fully responsive (small/big screens, text scales, no overflow).
- Prefer composition over inheritance.
- Use const constructors and const widgets wherever possible.
- Use arrow syntax for simple methods and trailing commas for formatting.
- Use descriptive variable names (e.g., isLoading, hasError).

State Management
- Use Riverpod providers. Minimize rebuilds (watch only what is needed, use select/selectAsync).
- Use Freezed for immutable state and unions.
- For async work, use AsyncValue and handle loading/error/data states.

Error & Empty States
- Display errors with SelectableText.rich in red.
- Handle empty states within the same screen (no crashes/overflows).

Performance & Networking
- Avoid unnecessary requests; debounce/throttle where appropriate.
- Use ListView.builder/SliverList for large lists.
- Use AssetImage for local assets and cached_network_image for remote images.
- Handle Supabase/network errors explicitly; surface meaningful messages.

Responsive UI Practices
- Use LayoutBuilder/MediaQuery/Flexible/Expanded to avoid overflows.
Test the UI across different screen sizes, text scale factors, and both light and dark themes to ensure proper responsiveness and accessibility.(clamp , Mediaquery...)
- Use outline borders for buttons you add for alertdialogs you add.

Project Structure
- Structure files: exported widget, subwidgets, helpers, static content, types.

Mobile Local Database
- On mobile, use a local database/cache layer for offline-first (e.g., Isar).

Legacy Files Policy
- Do not refactor existing large files solely to reduce size; preserve current behavior.
- For new or modified features, split into subwidgets; target â‰¤ 400 lines per file.
- Prefer composition and module extraction over touching stable, large screens.

Mobile Safe Area & Insets
- On mobile, ensure bottom SafeArea for screens with bottom controls.
- Use SafeArea(bottom: true) or add padding equal to MediaQuery.viewPadding.bottom.
- Avoid double insets when nesting SafeArea; prefer a single top-level SafeArea per screen.
- For forms, set Scaffold(resizeToAvoidBottomInset: true) to avoid keyboard overlap.
